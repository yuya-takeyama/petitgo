name: test

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.24.4'

      - name: Cache Go modules
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests with race detection
        run: go test -race -v -cover ./...

      - name: Build binary
        run: go build -o petitgo

      - name: Test help command
        run: ./petitgo help

      - name: Test REPL functionality
        timeout-minutes: 1
        run: |
          output=$(echo "2 + 3" | ./petitgo)
          if echo "$output" | grep -q '^> 5$'; then
            echo "REPL test passed: 2 + 3 = 5"
          else
            echo "REPL test failed!"
            echo "Full output:"
            echo "$output"
            exit 1
          fi

      - name: Test fibonacci execution
        run: |
          output=$(./petitgo run examples/fibonacci.pg | tr '\n' ' ')
          expected="0 1 1 2 3 5 8 13 21 34 "
          if [ "$output" = "$expected" ]; then
            echo "Fibonacci test passed: $output"
          else
            echo "Fibonacci test failed!"
            echo "Expected: $expected"
            echo "Got:      $output"
            exit 1
          fi
